name: Azure Pipelines
variables:
  python.version: '3.7.6'
  terraform.version: '0.13.4'
stages:
- stage: Provisioning
  displayName: Provisioning
  jobs: 
  - job: ProvisioningAppService
    displayName: Provisioning AppService
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'default'
        sshPublicKey: 'AAAAB3NzaC1yc2EAAAADAQABAAABAQCuixsVsZL8AntDJsei5hdhXYkY/J9INbD5TvqhcCW7kOWOWytHmQ2Itq6qghoJ/xqiJsnxYqcNrq+mVZi6Oe03u9f4cINPuNVmN/uraht92tT1rKrz2PN2/MccbHMugBfzQyxopJ2MdElpYLMMKB7um+/mYL/XJjsb0rL8E40uLZw1BxZud85VnCsSAXbwMH37lhSWjSxdpmx/RWOyV0zKYRg6G5gO4lT3B8mk7M2PvWAA/N64KwAF7pjSgHhLqjCzcAPcvaA0S3dJX+/HaHN2yxpV8mLy2Htji/aB88CqsNYRZcLilLdIr2pkOJjTjcMey0OvJb7KY2Fn9RWAbByj'
        sshKeySecureFile: 'id_rsa'
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.4'
    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'EnsuringQualityReleasesSC'
        backendAzureRmResourceGroupName: 'RG-SUPPORT'
        backendAzureRmStorageAccountName: 'sageneralsupport'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: 'ensuring-quality-releases.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV1@0
      displayName: Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'EnsuringQualityReleasesSC'
        backendAzureRmResourceGroupName: 'RG-SUPPORT'
        backendAzureRmStorageAccountName: 'sageneralsupport'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: 'ensuring-quality-releases.tfstate'
    - task: TerraformTaskV1@0
      displayName: Terraform Validate and Apply  
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'EnsuringQualityReleasesSC'
        backendAzureRmResourceGroupName: 'RG-SUPPORT'
        backendAzureRmStorageAccountName: 'sageneralsupport'
        backendAzureRmContainerName: 'terraform-state'
        backendAzureRmKey: 'ensuring-quality-releases.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

- stage: Build
  displayName: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'id_rsa'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: Deployment
  displayName: Deployment
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'EnsuringQualityReleasesSC'
              appType: 'webApp'
              appName: 'EQR-AppService'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path

- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
  - job: PostmanTests
    displayName: PostmanTests
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Tests
      inputs:
        script: 'newman run automatedtesting/postman/StarterAPIs.json --reporters cli,junit --reporter-junit-export Results/PostmanTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      inputs:
        script: 'ls'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/PostmanTests.xml'